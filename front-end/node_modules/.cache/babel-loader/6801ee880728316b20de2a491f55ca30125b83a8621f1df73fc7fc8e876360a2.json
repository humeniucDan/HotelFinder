{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<form class=\\\"form-inline\\\"><div class=\\\"form-group mb-2\\\"><label for=\\\"staticEmail2\\\" class=\\\"sr-only\\\">Email</label><input type=\\\"text\\\" readonly class=\\\"form-control-plaintext\\\" id=\\\"staticEmail2\\\" value=\\\"email@example.com\\\"></div><div class=\\\"form-group mx-sm-3 mb-2\\\"><label for=\\\"inputPassword2\\\" class=\\\"sr-only\\\">Password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword2\\\" placeholder=\\\"Password\\\"></div><button type=\\\"submit\\\" class=\\\"btn btn-primary mb-2\\\">Confirm identity</button></form><div id=\\\"map-div\\\" style=\\\"width:100%;height:100vh;\\\"></div>\", 2);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _hoisted_1;\n}","map":{"version":3,"names":["_createStaticVNode","_hoisted_1"],"sources":["C:\\SIEMENS_Proj\\front-end\\src\\App.vue"],"sourcesContent":["<template>\n  <form class=\"form-inline\">\n    <div class=\"form-group mb-2\">\n      <label for=\"staticEmail2\" class=\"sr-only\">Email</label>\n      <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"staticEmail2\" value=\"email@example.com\">\n    </div>\n    <div class=\"form-group mx-sm-3 mb-2\">\n      <label for=\"inputPassword2\" class=\"sr-only\">Password</label>\n      <input type=\"password\" class=\"form-control\" id=\"inputPassword2\" placeholder=\"Password\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary mb-2\">Confirm identity</button>\n  </form>\n\n  <div id=\"map-div\" style=\"width:100%; height: 100vh\"></div>\n\n</template>\n\n\n<script>\nimport { Loader } from '@googlemaps/js-api-loader';\n\n\nexport default {\n  name: 'App',\n\n  data(){\n    return {\n      lat: 0,\n      lng: 0,\n      map: []\n    };\n  },\n\n  async created() {\n    await this.getLocation()\n    this.loadMap()\n  },\n\n  methods: {\n    getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          this.lat = position.coords.latitude   \n          this.lng = position.coords.longitude\n        })\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\")\n      }\n    },\n\n    async loadMap() {\n\n      console.log(this.lat, this.lng)\n      const loader = new Loader({ apiKey: 'AIzaSyA1M_-TOE9rtwD_SkcfAkcjEpHJhk6RY6g' });\n\n      try {\n          await loader.importLibrary(\"maps\");\n\n          const position = { lat: this.lat, lng: this.lng};\n          const { Map } = google.maps;\n\n          this.map = new Map(document.getElementById(\"map-div\"), {\n              zoom: 15,\n              center: {lat: this.lat, lng: this.lng}\n          });\n      } catch (error) {\n          console.error(\"Error loading map:\", error);\n      }\n    }\n  }\n}\n</script>\n"],"mappings":";gCAAAA,kBAAA;;SACEC,UAUO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}