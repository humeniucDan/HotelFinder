{"ast":null,"code":"/* eslint-disable no-undef */\nimport { computed, ref, onMounted, onUnmounted, watch } from 'vue';\nimport { useGeolocation } from './useGeolocation';\nimport { Loader } from '@googlemaps/js-api-loader';\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyBea65xicuAhWz8oVHvEn6_Rlg8h9nr_EU';\nexport default {\n  name: 'App',\n  setup() {\n    const {\n      coords\n    } = useGeolocation();\n    const currPos = computed(() => ({\n      lat: coords.value.latitude,\n      lng: coords.value.longitude\n    }));\n    const otherPos = ref(null);\n    const loader = new Loader({\n      apiKey: GOOGLE_MAPS_API_KEY\n    });\n    const mapDiv = ref(null);\n    let map = ref(null);\n    let clickListener = null;\n    onMounted(async () => {\n      await loader.load();\n      map.value = new google.maps.Map(mapDiv.value, {\n        center: currPos.value,\n        zoom: 7\n      });\n      clickListener = map.value.addListener('click', ({\n        latLng: {\n          lat,\n          lng\n        }\n      }) => otherPos.value = {\n        lat: lat(),\n        lng: lng()\n      });\n    });\n    onUnmounted(async () => {\n      if (clickListener) clickListener.remove();\n    });\n    let line = null;\n    watch([map, currPos, otherPos], () => {\n      if (line) line.setMap(null);\n      if (map.value && otherPos.value != null) line = new google.maps.Polyline({\n        path: [currPos.value, otherPos.value],\n        map: map.value\n      });\n    });\n    const haversineDistance = (pos1, pos2) => {\n      const R = 3958.8; // Radius of the Earth in miles\n      const rlat1 = pos1.lat * (Math.PI / 180); // Convert degrees to radians\n      const rlat2 = pos2.lat * (Math.PI / 180); // Convert degrees to radians\n      const difflat = rlat2 - rlat1; // Radian difference (latitudes)\n      const difflon = (pos2.lng - pos1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n      const d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n      return d;\n    };\n    const distance = computed(() => otherPos.value === null ? 0 : haversineDistance(currPos.value, otherPos.value));\n    return {\n      currPos,\n      otherPos,\n      distance,\n      mapDiv\n    };\n  }\n};","map":{"version":3,"names":["computed","ref","onMounted","onUnmounted","watch","useGeolocation","Loader","GOOGLE_MAPS_API_KEY","name","setup","coords","currPos","lat","value","latitude","lng","longitude","otherPos","loader","apiKey","mapDiv","map","clickListener","load","google","maps","Map","center","zoom","addListener","latLng","remove","line","setMap","Polyline","path","haversineDistance","pos1","pos2","R","rlat1","Math","PI","rlat2","difflat","difflon","d","asin","sqrt","sin","cos","distance"],"sources":["C:\\SIEMENS_Proj\\front-end\\src\\App.vue"],"sourcesContent":["<script>\n/* eslint-disable no-undef */\nimport { computed, ref, onMounted, onUnmounted, watch } from 'vue'\nimport { useGeolocation } from './useGeolocation'\nimport { Loader } from '@googlemaps/js-api-loader'\n\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyBea65xicuAhWz8oVHvEn6_Rlg8h9nr_EU'\n\nexport default {\n  name: 'App',\n  setup() {\n    const { coords } = useGeolocation()\n    const currPos = computed(() => ({\n      lat: coords.value.latitude,\n      lng: coords.value.longitude\n    }))\n    const otherPos = ref(null)\n\n    const loader = new Loader({ apiKey: GOOGLE_MAPS_API_KEY })\n    const mapDiv = ref(null)\n    let map = ref(null)\n    let clickListener = null\n    onMounted(async () => {\n      await loader.load()\n      map.value = new google.maps.Map(mapDiv.value, {\n        center: currPos.value,\n        zoom: 7\n      })\n      clickListener = map.value.addListener(\n        'click',\n        ({ latLng: { lat, lng } }) =>\n          (otherPos.value = { lat: lat(), lng: lng() })\n      )\n    })\n    onUnmounted(async () => {\n      if (clickListener) clickListener.remove()\n    })\n\n    let line = null\n    watch([map, currPos, otherPos], () => {\n      if (line) line.setMap(null)\n      if (map.value && otherPos.value != null)\n        line = new google.maps.Polyline({\n          path: [currPos.value, otherPos.value],\n          map: map.value\n        })\n    })\n\n    const haversineDistance = (pos1, pos2) => {\n      const R = 3958.8 // Radius of the Earth in miles\n      const rlat1 = pos1.lat * (Math.PI / 180) // Convert degrees to radians\n      const rlat2 = pos2.lat * (Math.PI / 180) // Convert degrees to radians\n      const difflat = rlat2 - rlat1 // Radian difference (latitudes)\n      const difflon = (pos2.lng - pos1.lng) * (Math.PI / 180) // Radian difference (longitudes)\n\n      const d =\n        2 *\n        R *\n        Math.asin(\n          Math.sqrt(\n            Math.sin(difflat / 2) * Math.sin(difflat / 2) +\n              Math.cos(rlat1) *\n                Math.cos(rlat2) *\n                Math.sin(difflon / 2) *\n                Math.sin(difflon / 2)\n          )\n        )\n      return d\n    }\n    const distance = computed(() =>\n      otherPos.value === null\n        ? 0\n        : haversineDistance(currPos.value, otherPos.value)\n    )\n    return { currPos, otherPos, distance, mapDiv }\n  }\n}\n</script>\n\n<template>\n  <div class=\"d-flex text-center\" style=\"height: 20vh\">\n    <div class=\"m-auto\">\n      <h4>Your Position</h4>\n      Latitude: {{ currPos.lat.toFixed(2) }}, Longitude:\n      {{ currPos.lng.toFixed(2) }}\n    </div>\n    <div class=\"m-auto\">\n      <h4>Distance</h4>\n      {{ distance.toFixed(2) }} miles\n    </div>\n    <div class=\"m-auto\">\n      <h4>Clicked Position</h4>\n      <span v-if=\"otherPos\">\n        Latitude: {{ otherPos.lat.toFixed(2) }}, Longitude:\n        {{ otherPos.lng.toFixed(2) }}\n      </span>\n      <span v-else>Click the map to select a position</span>\n    </div>\n  </div>\n  <div ref=\"mapDiv\" style=\"width: 100%; height: 80vh\" />\n</template>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}